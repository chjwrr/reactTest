/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from "ethers";
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from "./common";

export declare namespace N2SWAP {
  export type NFTInfoStruct = {
    tokenContract: AddressLike;
    tokenID: BigNumberish;
    initDayID: BigNumberish;
    initPrice: BigNumberish;
    initAddress: AddressLike;
    initCycle: BigNumberish;
    claimedStats: boolean;
  };

  export type NFTInfoStructOutput = [
    tokenContract: string,
    tokenID: bigint,
    initDayID: bigint,
    initPrice: bigint,
    initAddress: string,
    initCycle: bigint,
    claimedStats: boolean
  ] & {
    tokenContract: string;
    tokenID: bigint;
    initDayID: bigint;
    initPrice: bigint;
    initAddress: string;
    initCycle: bigint;
    claimedStats: boolean;
  };
}

export interface TestContactInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BatchViewResaleRebuyPrice"
      | "BatchViewResaleSalePrice"
      | "NFTInfoList"
      | "USDT"
      | "_burnAddress"
      | "aPrice"
      | "addAdmin"
      | "addBalance"
      | "allAdmins"
      | "autoOpen"
      | "balance"
      | "batchAddAdmin"
      | "batchSetNftBuyPrice"
      | "batchSetNftSellPrice"
      | "batchStakeNFT"
      | "batchUpdateResale"
      | "checkBalance"
      | "clearNFTOwnerList"
      | "dailyReserveAmount"
      | "dayID"
      | "devStakeNFT"
      | "fundAddress"
      | "getAPrice"
      | "getNFTInfoList"
      | "getNftOwnerList"
      | "getSaleTimesAndFee"
      | "income"
      | "initialize"
      | "intTime"
      | "isAdmin"
      | "nftBuyPrice"
      | "nftOwnerList"
      | "nftOwnerListLength"
      | "nftPrice"
      | "nftSellPrice"
      | "pool"
      | "reduceBalance"
      | "removeAdmin"
      | "renounceAdmin"
      | "resaleAmount"
      | "resaleFee"
      | "reserve"
      | "reserveAmount"
      | "reserveStats"
      | "setAPrice"
      | "setDailyReserveAmount"
      | "setDayID"
      | "setFund"
      | "setNFTOwnerList"
      | "setPoolAddr"
      | "setWhiteContract"
      | "typeId"
      | "updateBalance"
      | "updateIncome"
      | "viewResaleBuyPrice"
      | "viewResaleSalePrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "BOUGHT"
      | "Initialized"
      | "RESERVED"
      | "SOLD"
      | "TRADE"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BatchViewResaleRebuyPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BatchViewResaleSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "NFTInfoList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBalance",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(functionFragment: "autoOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAddAdmin",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetNftBuyPrice",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSetNftSellPrice",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeNFT",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish,
      BigNumberish[],
      AddressLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpdateResale",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBalance",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearNFTOwnerList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyReserveAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dayID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "devStakeNFT",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNFTInfoList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftOwnerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleTimesAndFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "income", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "intTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftBuyPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftOwnerList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftOwnerListLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftSellPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reduceBalance",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resaleAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resaleFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserve",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveStats",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDailyReserveAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDayID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTOwnerList",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "typeId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBalance",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIncome",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "viewResaleBuyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewResaleSalePrice",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BatchViewResaleRebuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BatchViewResaleSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NFTInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchAddAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetNftBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSetNftSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUpdateResale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearNFTOwnerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyReserveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dayID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devStakeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftOwnerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleTimesAndFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "income", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "intTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftOwnerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftOwnerListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resaleAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resaleFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDailyReserveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDayID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNFTOwnerList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewResaleBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewResaleSalePrice",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BOUGHTEvent {
  export type InputTuple = [
    buyer: AddressLike,
    dayId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [buyer: string, dayId: bigint, price: bigint];
  export interface OutputObject {
    buyer: string;
    dayId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RESERVEDEvent {
  export type InputTuple = [
    addr: AddressLike,
    amount: BigNumberish,
    _dayID: BigNumberish
  ];
  export type OutputTuple = [addr: string, amount: bigint, _dayID: bigint];
  export interface OutputObject {
    addr: string;
    amount: bigint;
    _dayID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SOLDEvent {
  export type InputTuple = [
    seller: AddressLike,
    dayId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [seller: string, dayId: bigint, price: bigint];
  export interface OutputObject {
    seller: string;
    dayId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TRADEEvent {
  export type InputTuple = [
    buyer: AddressLike,
    seller: AddressLike,
    number: BigNumberish,
    price: BigNumberish,
    dayId: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    seller: string,
    number: bigint,
    price: bigint,
    dayId: bigint
  ];
  export interface OutputObject {
    buyer: string;
    seller: string;
    number: bigint;
    price: bigint;
    dayId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestContact extends BaseContract {
  connect(runner?: ContractRunner | null): TestContact;
  waitForDeployment(): Promise<this>;

  interface: TestContactInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BatchViewResaleRebuyPrice: TypedContractMethod<
    [_dayID: BigNumberish],
    [bigint[]],
    "view"
  >;

  BatchViewResaleSalePrice: TypedContractMethod<
    [_dayID: BigNumberish],
    [bigint[]],
    "view"
  >;

  NFTInfoList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, bigint, boolean] & {
        tokenContract: string;
        tokenID: bigint;
        initDayID: bigint;
        initPrice: bigint;
        initAddress: string;
        initCycle: bigint;
        claimedStats: boolean;
      }
    ],
    "view"
  >;

  USDT: TypedContractMethod<[], [string], "view">;

  _burnAddress: TypedContractMethod<[], [string], "view">;

  aPrice: TypedContractMethod<[], [bigint], "view">;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  addBalance: TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  autoOpen: TypedContractMethod<[], [boolean], "view">;

  balance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  batchAddAdmin: TypedContractMethod<
    [amounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  batchSetNftBuyPrice: TypedContractMethod<
    [_types: BigNumberish[], _days: BigNumberish[], _prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchSetNftSellPrice: TypedContractMethod<
    [_types: BigNumberish[], _days: BigNumberish[], _prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchStakeNFT: TypedContractMethod<
    [
      _tokenContract: AddressLike,
      tokenIDs: BigNumberish[],
      _dayID: BigNumberish,
      initPrices: BigNumberish[],
      initAddrs: AddressLike[],
      initCycles: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchUpdateResale: TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  checkBalance: TypedContractMethod<
    [dayId: BigNumberish, prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  clearNFTOwnerList: TypedContractMethod<
    [num: BigNumberish, dID: BigNumberish],
    [void],
    "nonpayable"
  >;

  dailyReserveAmount: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  dayID: TypedContractMethod<[], [bigint], "view">;

  devStakeNFT: TypedContractMethod<
    [
      _tokenContract: AddressLike,
      _tokenID: BigNumberish,
      _intPrice: BigNumberish,
      _intAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  fundAddress: TypedContractMethod<[], [string], "view">;

  getAPrice: TypedContractMethod<[], [bigint], "view">;

  getNFTInfoList: TypedContractMethod<
    [],
    [N2SWAP.NFTInfoStructOutput[]],
    "view"
  >;

  getNftOwnerList: TypedContractMethod<
    [_dayID: BigNumberish],
    [string[]],
    "view"
  >;

  getSaleTimesAndFee: TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [[bigint, bigint] & { times: bigint; fee: bigint }],
    "view"
  >;

  income: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  intTime: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  nftBuyPrice: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  nftOwnerList: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  nftOwnerListLength: TypedContractMethod<
    [_dayID: BigNumberish],
    [bigint],
    "view"
  >;

  nftPrice: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  nftSellPrice: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  pool: TypedContractMethod<[], [string], "view">;

  reduceBalance: TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  resaleAmount: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  resaleFee: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  reserve: TypedContractMethod<
    [amount: BigNumberish, feeType: boolean],
    [void],
    "nonpayable"
  >;

  reserveAmount: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  reserveStats: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  setAPrice: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  setDailyReserveAmount: TypedContractMethod<
    [amount: BigNumberish, currentdayID: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDayID: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  setFund: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  setNFTOwnerList: TypedContractMethod<
    [addrs: AddressLike[], dID: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolAddr: TypedContractMethod<[], [void], "nonpayable">;

  setWhiteContract: TypedContractMethod<
    [addr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  typeId: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  updateBalance: TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  updateIncome: TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  viewResaleBuyPrice: TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [bigint],
    "view"
  >;

  viewResaleSalePrice: TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BatchViewResaleRebuyPrice"
  ): TypedContractMethod<[_dayID: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "BatchViewResaleSalePrice"
  ): TypedContractMethod<[_dayID: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "NFTInfoList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, bigint, boolean] & {
        tokenContract: string;
        tokenID: bigint;
        initDayID: bigint;
        initPrice: bigint;
        initAddress: string;
        initCycle: bigint;
        claimedStats: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "USDT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_burnAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "aPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBalance"
  ): TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "autoOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchAddAdmin"
  ): TypedContractMethod<[amounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchSetNftBuyPrice"
  ): TypedContractMethod<
    [_types: BigNumberish[], _days: BigNumberish[], _prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchSetNftSellPrice"
  ): TypedContractMethod<
    [_types: BigNumberish[], _days: BigNumberish[], _prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchStakeNFT"
  ): TypedContractMethod<
    [
      _tokenContract: AddressLike,
      tokenIDs: BigNumberish[],
      _dayID: BigNumberish,
      initPrices: BigNumberish[],
      initAddrs: AddressLike[],
      initCycles: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchUpdateResale"
  ): TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBalance"
  ): TypedContractMethod<
    [dayId: BigNumberish, prices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearNFTOwnerList"
  ): TypedContractMethod<
    [num: BigNumberish, dID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dailyReserveAmount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dayID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "devStakeNFT"
  ): TypedContractMethod<
    [
      _tokenContract: AddressLike,
      _tokenID: BigNumberish,
      _intPrice: BigNumberish,
      _intAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNFTInfoList"
  ): TypedContractMethod<[], [N2SWAP.NFTInfoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getNftOwnerList"
  ): TypedContractMethod<[_dayID: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSaleTimesAndFee"
  ): TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [[bigint, bigint] & { times: bigint; fee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "income"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "intTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nftBuyPrice"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftOwnerList"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftOwnerListLength"
  ): TypedContractMethod<[_dayID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftPrice"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftSellPrice"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reduceBalance"
  ): TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resaleAmount"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "resaleFee"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "reserve"
  ): TypedContractMethod<
    [amount: BigNumberish, feeType: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveAmount"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "reserveStats"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAPrice"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDailyReserveAmount"
  ): TypedContractMethod<
    [amount: BigNumberish, currentdayID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDayID"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFund"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNFTOwnerList"
  ): TypedContractMethod<
    [addrs: AddressLike[], dID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolAddr"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhiteContract"
  ): TypedContractMethod<
    [addr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "typeId"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateBalance"
  ): TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIncome"
  ): TypedContractMethod<
    [addrs: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewResaleBuyPrice"
  ): TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewResaleSalePrice"
  ): TypedContractMethod<
    [_addr: AddressLike, _dayID: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BOUGHT"
  ): TypedContractEvent<
    BOUGHTEvent.InputTuple,
    BOUGHTEvent.OutputTuple,
    BOUGHTEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RESERVED"
  ): TypedContractEvent<
    RESERVEDEvent.InputTuple,
    RESERVEDEvent.OutputTuple,
    RESERVEDEvent.OutputObject
  >;
  getEvent(
    key: "SOLD"
  ): TypedContractEvent<
    SOLDEvent.InputTuple,
    SOLDEvent.OutputTuple,
    SOLDEvent.OutputObject
  >;
  getEvent(
    key: "TRADE"
  ): TypedContractEvent<
    TRADEEvent.InputTuple,
    TRADEEvent.OutputTuple,
    TRADEEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "BOUGHT(address,uint256,uint256)": TypedContractEvent<
      BOUGHTEvent.InputTuple,
      BOUGHTEvent.OutputTuple,
      BOUGHTEvent.OutputObject
    >;
    BOUGHT: TypedContractEvent<
      BOUGHTEvent.InputTuple,
      BOUGHTEvent.OutputTuple,
      BOUGHTEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RESERVED(address,uint256,uint256)": TypedContractEvent<
      RESERVEDEvent.InputTuple,
      RESERVEDEvent.OutputTuple,
      RESERVEDEvent.OutputObject
    >;
    RESERVED: TypedContractEvent<
      RESERVEDEvent.InputTuple,
      RESERVEDEvent.OutputTuple,
      RESERVEDEvent.OutputObject
    >;

    "SOLD(address,uint256,uint256)": TypedContractEvent<
      SOLDEvent.InputTuple,
      SOLDEvent.OutputTuple,
      SOLDEvent.OutputObject
    >;
    SOLD: TypedContractEvent<
      SOLDEvent.InputTuple,
      SOLDEvent.OutputTuple,
      SOLDEvent.OutputObject
    >;

    "TRADE(address,address,uint256,uint256,uint256)": TypedContractEvent<
      TRADEEvent.InputTuple,
      TRADEEvent.OutputTuple,
      TRADEEvent.OutputObject
    >;
    TRADE: TypedContractEvent<
      TRADEEvent.InputTuple,
      TRADEEvent.OutputTuple,
      TRADEEvent.OutputObject
    >;
  };
}
